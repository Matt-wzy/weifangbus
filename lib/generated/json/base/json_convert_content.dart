// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:weifangbus/entity/line/route_real_time_info_entity.dart';
import 'package:weifangbus/entity/line/station_real_time_info_entity.dart';
import 'package:weifangbus/generated/json/route_real_time_info_entity_helper.dart';
import 'package:weifangbus/generated/json/station_real_time_info_entity_helper.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case RouteRealTimeInfoEntity:
        return routeRealTimeInfoEntityFromJson(
            data as RouteRealTimeInfoEntity, json) as T;
      case RouteRealTimeInfoRStaRealTInfoList:
        return routeRealTimeInfoRStaRealTInfoListFromJson(
            data as RouteRealTimeInfoRStaRealTInfoList, json) as T;
      case StationRealTimeInfoEntity:
        return stationRealTimeInfoEntityFromJson(
            data as StationRealTimeInfoEntity, json) as T;
      case StationRealTimeInfoRealtimeInfoList:
        return stationRealTimeInfoRealtimeInfoListFromJson(
            data as StationRealTimeInfoRealtimeInfoList, json) as T;
      case StationRealTimeInfoRealtimeInfoListBusPostion:
        return stationRealTimeInfoRealtimeInfoListBusPostionFromJson(
            data as StationRealTimeInfoRealtimeInfoListBusPostion, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case RouteRealTimeInfoEntity:
        return routeRealTimeInfoEntityToJson(data as RouteRealTimeInfoEntity);
      case RouteRealTimeInfoRStaRealTInfoList:
        return routeRealTimeInfoRStaRealTInfoListToJson(
            data as RouteRealTimeInfoRStaRealTInfoList);
      case StationRealTimeInfoEntity:
        return stationRealTimeInfoEntityToJson(
            data as StationRealTimeInfoEntity);
      case StationRealTimeInfoRealtimeInfoList:
        return stationRealTimeInfoRealtimeInfoListToJson(
            data as StationRealTimeInfoRealtimeInfoList);
      case StationRealTimeInfoRealtimeInfoListBusPostion:
        return stationRealTimeInfoRealtimeInfoListBusPostionToJson(
            data as StationRealTimeInfoRealtimeInfoListBusPostion);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {
      case 'RouteRealTimeInfoEntity':
        return RouteRealTimeInfoEntity().fromJson(json);
      case 'RouteRealTimeInfoRStaRealTInfoList':
        return RouteRealTimeInfoRStaRealTInfoList().fromJson(json);
      case 'StationRealTimeInfoEntity':
        return StationRealTimeInfoEntity().fromJson(json);
      case 'StationRealTimeInfoRealtimeInfoList':
        return StationRealTimeInfoRealtimeInfoList().fromJson(json);
      case 'StationRealTimeInfoRealtimeInfoListBusPostion':
        return StationRealTimeInfoRealtimeInfoListBusPostion().fromJson(json);
    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {
      case 'RouteRealTimeInfoEntity':
        return List<RouteRealTimeInfoEntity>();
      case 'RouteRealTimeInfoRStaRealTInfoList':
        return List<RouteRealTimeInfoRStaRealTInfoList>();
      case 'StationRealTimeInfoEntity':
        return List<StationRealTimeInfoEntity>();
      case 'StationRealTimeInfoRealtimeInfoList':
        return List<StationRealTimeInfoRealtimeInfoList>();
      case 'StationRealTimeInfoRealtimeInfoListBusPostion':
        return List<StationRealTimeInfoRealtimeInfoListBusPostion>();
    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}
